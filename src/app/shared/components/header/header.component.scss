@import './../../../../styles.scss';

header {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 80px;
    @include setFlex();
}

#headerContent {
    @include setFlex($jc: space-between);

}

.logoHeaderContainer {
    width: 80px;
    height: 80px;
    @include setFlex();
}

.logoSVG {
    width: 70px;
    height: 70px;
    transition: $stdTransition;

    &:hover {
        width: 80px;
        height: 80px;
        transform: rotate(4deg);
    }
}

.navLinkContainer {
    position: relative;
    transition: $stdTransition;
    background-repeat: none;
    background-size: cover;
    background-position: center;
    @include setFlex();
    width: 110px;
    height: 50px;
}

.topDownContainer {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 0;
    overflow: hidden;
}

.leftRightContainer {
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    width: 0;
    overflow: hidden;
}

#fadeInImageAboutMe {
    width: 100%;
    height: 50px;
}

#fadeInImageSkills {
    width: 110px;
    height: 55px;
}

#fadeInImageProjects {
    width: 110px;
    height: 80px;
}

#fadeInImageContact {
    width: 110px;
    height: 55px;
}


nav {
    @include setFlex($jc: space-evenly);
    flex: 1;
}

.navLink {
    position: relative;
    z-index: 1;
    font-weight: 700;
    mix-blend-mode: difference;
    color: $clrBaseBright;
}

.nav-text {
    text-decoration: none;
    font-size: 18px;
}

.hamburgerContainer {
    display: none;
    width: 32px;
    height: 32px;
    margin-right: 24px;
    background-position: center;
    background-repeat: no-repeat;
    background-size: cover;
    transition: $stdTransition;
}

.hamburgerContainerToOpen {
    mix-blend-mode: difference;
    color: $clrBaseBright;
    background-image: url('./../../../../assets/images/06_other/hamburger_Default.svg');

    &:hover {
        background-image: url('./../../../../assets/images/06_other/hamburger_Default_Hover.svg');
    }
}

.hamburgerContainerToClose {
    background-image: url('./../../../../assets/images/06_other/hamburger_Close.svg');

    &:hover {
        background-image: url('./../../../../assets/images/06_other/hamburger_Close_hover.svg');
    }
}

//################################################### MobileMenue ###################################################
.mobileMenueContainer {
    position: absolute;
    z-index: 1;
    top: 0;
    left: 0;
    right: 0;
    background-image: url('./../../../../assets/images/01_Background/all/mobileisolatedPaperRips.png');
    background-position: bottom;
    background-repeat: no-repeat;
    background-size: cover;
    width: 100%;
    padding-bottom: 100px;
    transition: $stdTransition;
    @include setFlex($fd: column, $ai: space-between, $gap: 64px);
}

.mobileMenueclosed {
    transform: translateY(-105%);
}

.mobileMenueHeaderContainer {
    @include setFlex($jc: space-between);
}

.mobileMenueNaviContainer {
    @include setFlex($fd: column, $gap: 32px);
}

.mobileMenueSocialContainer {
    @include setFlex($gap: 24px);
}

.socialMediaIcon {
    transition: $stdTransition;

    &:hover {
        fill: $clrHighlight2;
    }
}

.languageSwitchContainer {
    color: $clrBaseBright;
    margin-right: 32px;
}

.mobileLanguageSwitchContainer {
    color: $clrBaseBright;
}

//################################################### LanguageToggle ##################################################
.languageToggleContainer,
.languageToggleContainerMobile {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 8px;
    padding: 8px;
    mix-blend-mode: difference;
    color: $clrBaseBright;
}

.languageSelectionContainer {
    position: relative;
    @include setFlex();
    width: 100%;
    height: 40px;

    span {
        cursor: pointer;
        position: relative;
        padding: 8px;
    }
}

.fadeInImageLanguage {
    width: 100%;
    height: 40px;
}

.languageToggle {
    @include setFlex($gap: 8px);
}

input[type="checkbox"].languageCheckboxToggle {
    /*SELECTOR: input with the type "checkbox" which has the class "languageCheckboxToggle"*/
    opacity: 0;
    cursor: pointer;
    position: absolute;
    z-index: -900;
}

input[type="checkbox"].languageCheckboxToggle+label {
    /*SELECTOR: The direct next Label of (input with the type "checkbox" which has the class "languageCheckboxToggle")*/
    position: relative;
    display: flex;
    align-items: center;
    /*with the default value "inline" it does not work*/
    cursor: pointer;
}

input[type="checkbox"].languageCheckboxToggle+label::before {
    /*SELECTOR: The before element of the direct next Label of (input with the type "checkbox" which has the class "languageCheckboxToggle")*/
    content: "";
    /*kind of requiered when working with ::before and ::after - an empty Content*/

    width: 32px;
    height: 8px;
    background-color: $clrHighlight3;
    border-radius: 1em;
}

input[type="checkbox"].languageCheckboxToggle+label:hover::before {
    background-color: $clrHighlight3;
}

input[type="checkbox"].languageCheckboxToggle+label::after {
    /*SELECTOR: The after element of the direct next Label of (input with the type "checkbox" which has the class "languageCheckboxToggle")*/
    position: absolute;
    left: 0px;
    content: "";
    /*kind of requiered when working with ::before and ::after - an empty Content*/

    width: 16px;
    height: 16px;
    background-color: $clrHighlight2;
    border: 1px solid $clrBaseBright;
    border-radius: 1em;
    transition: all 150ms ease-in-out;
}

input[type="checkbox"].languageCheckboxToggle:checked+label::after {
    /*SELECTOR: The after element of the direct next Label of (input with the type "checkbox" which has the class "languageCheckboxToggle" and only if it is checked)*/
    left: 16px;
    background-color: $clrHighlight2;
    border: 1px solid $clrBaseBright;
}

.languageSelected {
    color: $clrHighlight3;
}